{"pages":[{"title":"お探しのページが見つかりませんでした","text":"申し訳ありません. お探しのページが見つかりませんでした。移動もしくは削除された可能性があります。 トップへ戻る","link":"/404.html"},{"title":"About","text":"当サイトについて当サイトは、私が言いたいことをつらつら書くだけのブログです。書きたいときに書くし、書きたくない時には書きません。たまに有益な事がかけるように頑張ります。 プロフィール平日は社畜、休日はゲームと読書。たまにプログラム作ったりデバイス弄ったり。 FINAL FANTASY シリーズ (5、7R、8、10、10-2、12、Dissidiaシリーズ) スマホ音ゲー (Cytus、Arcaea、Tone Sphere、Deemo、デレステ、等) パズル (知恵の輪、謎解き、The Witness) データ収集について当サイトでは、 Google LLC 提供の Google アナリティクス を使用しています。Google アナリティクスでは、トラフィックデータの収集のために Cookie を使用しています。このトラフィックデータは匿名で収集されており、個人を特定するものではありません。収集をオプトアウトする場合は、ブラウザの設定で当サイトの Cookie を無効化してください。 Google アナリティクス利用規約: https://marketingplatform.google.com/about/analytics/terms/jp/ ユーザーが Google パートナーのサイトやアプリを使用する際の Google によるデータ使用: https://marketingplatform.google.com/about/analytics/terms/jp/ 免責事項当サイトの情報の正確性について当サイトのコンテンツや情報において、可能な限り正確な情報を掲載するよう努めていますが、必ずしも正確性を保証するものではありません。特に古い記事については、情報の更新がされていない可能性がありますので、あらかじめご了承ください。また合法性や安全性なども保証しません。 損害等の責任について当サイトに掲載された内容によって生じた損害等の一切の責任を負いかねますので、ご了承ください。また当サイトからリンクやバナーなどによって他のサイトに移動された場合、移動先サイトで提供される情報、サービス等について一切の責任も負いません。当サイトの保守、火災、停電、その他の自然災害、ウィルスや第三者の妨害等行為による不可抗力によって、当サイトによるサービスが停止したことに起因して利用者に生じた損害についても、何ら責任を負うものではありません。当サイトを利用する場合は、自己責任で行う必要があります。 当サイトで掲載している画像の著作権や肖像権等について当サイトで掲載している画像の著作権や肖像権等は、各権利所有者に帰属します。万が一問題がある場合は、お手数ですが、TwitterもしくはGithubよりご連絡いただきますよう宜しくお願い致します。 お問い合わせTwitter: Message @@O_PermanentWave","link":"/about/index.html"}],"posts":[{"title":"麻婆豆腐 レシピ","text":"(調理時間30～40分) ◆材料(2人前)辣油(ラー油) サラダ油 90cc 唐辛子 5本 花椒 小さじ1 炸醤(ザージャン) 挽き肉(豚がおすすめ。牛、牛豚ミックスも可) 120g 紹興酒(無い場合は日本酒) 15cc 中国たまり醤油(無い場合は濃口醤油) 15cc 甜麺醤 10g 麻婆豆腐 本体 豆腐(ソフト豆腐がおすすめ。絹、木綿どちらでも可) 1丁 にんにく 2片(もしくはすりおろし10g) 生姜 2片(もしくはすりおろし10g) 粉唐辛子 大さじ1～ 豆豉醤 大さじ1 豆板醤 小さじ1 ピーシェン豆板醤(無い場合は豆板醤) 小さじ3 水 250cc 鶏ガラスープの素 水250ccに対し適量 昆布だし(もしくは昆布茶。無い場合はうま味調味料 小さじ1) 水250ccに対し適量の1/4 紹興酒(無い場合は日本酒) 20cc 中国たまり醤油(無い場合は濃口醤油) 20cc オイスターソース 小さじ1 ホワイトペッパー 少々 ブラックペッパー 少々 仕上げ 白ネギ 1/2本 葉ニンニク(もしくはニンニクの芽、無い場合は青ネギ) 1本 水 小さじ2 片栗粉 小さじ2 花椒 適量 化粧油 胡麻油 15cc ◆調理手順下ごしらえ 数時間前に豆腐をキッチンペーパーで巻いておき、水分を切っておく(任意) ワンポイント後工程に塩茹でによる脱水があるため、この工程は任意 ネギ、ニンニク、生姜をそれぞれ微塵切りにして別々に置いておく 葉ニンニクをそぎ切りにする ワンポイント断面積を増やすためにそぎ切りにすることで、香りが良くなる 豆腐を賽の目状に切っておく 水、鶏ガラスープの素、昆布だしでスープを作っておく 鍋に塩と水を入れ、沸騰させておく 辣油 辣油の材料をフライパンに入れ炒める ワンポイントここで入れる唐辛子や花椒は風味付けが主であり、量は辛さにあまり影響しない 焦げた匂いがするまで炒め、別の皿に移しておく ワンポイントこの後炸醤を作る場合は、フライパンを洗わないようにする 下ごしらえ(豆腐) 塩水に豆腐を入れ、煮立たせる 豆腐が煮えたら、水を切っておいておく ワンポイント鍋の中の豆腐が軽く浮いてきたら頃合い 炸醤 挽肉を炒める。ハンバーグのように両面をしっかり焼いてから、挽肉を崩して更に焼く ワンポイント焦げが香ばしさになるため、しっかり焼くことを推奨 挽肉に火が通り、ジャーという音からパチパチという音に変わり、油が澄んできたら、酒と醤油を入れる 酒と醤油の水分が飛んだら甜麺醤を入れて水分が飛ぶまでもう一度炒める ワンポイントこの後麻婆豆腐を作る場合は、フライパンを洗わないようにする 麻婆豆腐 辣油を半分ほど入れ、ニンニク、生姜、豆鼓醤、豆板醤、オイスターソース、ホワイトペッパー、ブラックペッパーを香りが立つまで炒める ワンポイント油で他の材料がバチバチと音を立てるまでは炒めること 焦げる直前に炸醤を入れて絡める スープ、酒、醤油、粉唐辛子を入れて一煮立ちさせる ワンポイントここで入れる唐辛子は辛さに直結するため、好みに合わせて調整すること。味調整は最後のタイミング。この時点で少し濃い目の味にしておく 豆腐を入れ、5分ほど煮込む ワンポイント豆腐にしっかり色がつくまで煮込む 刻みネギ、葉ニンニクを入れる ワンポイント煮込み過ぎるとネギ、葉ニンニクは柔らかくなってしまうので、この時点では煮込み過ぎないこと 火を止め、水溶き片栗粉を全体に馴染ませた後、もう一度火を入れ煮立たせる ワンポイントしっかり火を入れないと、片栗粉の粉っぽさが残るため、しっかり火を入れること 残りの化粧油(辣油、胡麻油)を混ぜたものを上からかけ、しっかり焼く。 ワンポイント手間を惜しまないのであれば、化粧油を別のフライパンで熱し、香りや香ばしさを引き立たせたものをかけた方が良い 皿に盛り付け、好みで花椒を振りかける ◆参考 陳麻婆豆腐／調理：陳 建一（現代の名工の技）陳建一が自宅で作る麻婆豆腐【決定版】本格!プロが教える四川麻婆豆腐!【麻辣】【花椒】【中華】【マー活】Vol.85【激辛】山椒も唐辛子も丸ごと食べる！スパイスで免疫力アップ！本格激辛四川麻婆豆腐の作り方！【飯テロ】【中華】【マーボー】【デトックス】【ダイエット】Vol.175【麻婆豆腐】銀座やまの辺 山野辺シェフが作る自宅でカンタン♪本格中華クッキング【麻婆豆腐】ミシュラン一つ星 中華の巨匠 山野辺シェフ登場！【究極の麻婆豆腐！！】ミシュランビブグルマン掲載店「中華銘菜 圳陽（センヨウ）」山田シェフに学ぶ、お店の超人気メニュー | [ENG SUB] Classic Spicy Mapo Tofu","link":"/2021/03/24/2021-03-24-01/"},{"title":"FFXにおけるダーク召喚獣の正体についての考察","text":"本ページはFINAL FANTASY X(以降FFX) International版より追加されたイベント、ダーク召喚獣イベントについて、作中で確認できる少ない情報からこれらの正体に迫る。 注意事項 本ページにはFFX、及びFFX-2に関するネタバレが多く含まれるため、攻略後の閲覧を推奨する。 FFXの用語は解説無く使用する。(分からない用語は各種攻略本やファイナルファンタジー用語辞典 Wiki等で確認すること。) ▶のマークがある場合は、マークをクリックすることで詳細を展開できる。 本考察は妄想であり、公式設定ではない。 ダーク召喚獣イベントの概要ダーク召喚獣はマカラーニャ寺院でシーモアを倒し反逆者となった後、ユウナ一行を処分するために各地に派遣された召喚士の召喚する召喚獣の総称である。個別の召喚獣はヘレティック・XXXという名前となっている。これらの召喚獣は以下のような特徴がある。 通常プレイで手に入れられる召喚獣と同じ容姿であり、黒と緑を基調とした2ndカラーをしている。 ナギ平原 訓練場モンスターと同等またはそれ以上の強さを持つ。 基となった召喚獣とは別個体。(後述) 全てのダーク召喚獣を撃破すると飛空挺の行き先にデア・リヒターが追加され、デア・リヒターと戦闘できるイベントが発生する。(後述) ダーク召喚獣の妨害により、アルテマウェポンやアニマ、シューティング・パワー、陣風(何それ？)の入手が遅れる可能性がある。 ダーク召喚獣の謎ダーク召喚獣にはいくつかの謎がある。以下に列挙する。 Ⅰ) 基となった召喚獣と別個体 ダーク召喚獣戦では、基となった召喚獣を召喚できる。もともと召喚士がある召喚獣を召喚している間、別の召喚士はその召喚獣を召喚できないルールがある。つまり、基となった召喚獣が同時に存在できるということは、ダーク召喚獣が「エボン=ジュによる憑依やシューインによる支配と違い、基の召喚獣を変質させたものでなく、基の召喚獣とは個体の違う独立した召喚獣」であることが分かる。だがその場合、複数の不審な点がある。 ヘレティック・メーガス三姉妹戦では、メーガス三姉妹以外でリトルナーレ→シュメルツェンド→デルタアタックを受け切るのはほぼ不可能。 Ⅱ) 召喚する者とされる者 ダーク召喚獣が召喚獣の一種であるとすると、ダーク召喚獣は他の召喚獣の例に漏れず、召喚獣を夢見る祈り子とそれを具現化する召喚士が必要である。しかしながら、作中ダーク召喚獣の祈り子は登場しない。また、ダーク召喚獣の登場シーンを見返すと、ユウナ一行にダーク召喚獣をけしかける人物は存在しても、召喚自体をしている人物は登場しない。ヘレティック・バハムート、ヘレティック・アニマに至ってはけしかける人物すら存在しない。これらの召喚獣を召喚しているのは一体誰であろうか。 ダーク召喚獣は召喚された状態で戦闘に突入する。 刺客は基本的にエボン関係の容姿をしているが、マグの刺客は一般人である。 Ⅲ) ダーク召喚獣の創造された時期と目的 ダーク召喚獣が創造された時期と目的についても謎が残る。ユウナ一行を処分するためにダーク召喚獣を使役することと、ダーク召喚獣を生み出した理由が一致するとは限らない。むしろ別の目的に使われていたダーク召喚獣をユウナ一行の処分に使った可能性の方が高い。もしユウナ一行に当てる為にダーク召喚獣を創造したのならば、たった数日、数ヶ月前にザナルカンドに向かった人物についての情報が無いことはあり得ない。しかし、霊峰ガガゼトを守るロンゾ族、祈り子を作ることの出来るユウナレスカからそのような発言はなく、エボンドームに記録も残っていない。ダーク召喚獣はいつ、何の目的で創造されたのだろうか。 人の出入りがほぼ無い魔天で待つバハムートと、試練のリトライが必要なアニマ。刺客のいないこの2体がユウナ一行を襲う理由は何であろうか。 Ⅳ) ダーク召喚獣の祈り子の創造者 本編で祈り子を作ることが出来ることが説明されたのは2名、ユウナレスカとエボンだけである。そして10年前に想像された究極召喚獣、アニマを基にしたヘレティック・アニマを生み出せるのはユウナレスカしか居ない。しかし、ユウナレスカは『シン』の討伐についてはむしろ肯定派であるにも関わらず、『シン』の討伐に有用であるはずのダーク召喚獣について前述の通り一切言及しない。(ダーク召喚獣イベントがオリジナル版にはなかったため、というメタ的な理由は除外する。)では何故、ユウナレスカはダーク召喚獣について言及しなかったのであろうか。 『シン』の仕組みを知る者ほど思考が極端になるだけで、スピラの幸福を願うのは一般的なスピラの民と変わらない。 Ⅴ) 既存の召喚獣と同じ容姿 そもそもFFXにおける召喚獣は、「祈り子の見る夢が、召喚士の力によって幻光虫と結びつき、実体化した姿」である。とするならば、ダーク召喚獣の祈り子はわざわざ既存の召喚獣と同じ姿を夢見ているわけである。既存の召喚獣と同じ姿をすることに何の意味があるのだろうか。また、同じ姿にする理由があったとして、他の祈り子の夢(召喚獣の容姿)をあれだけ正確に再現できるのだろうか。 アニマに至ってはシーモア母の生前の姿を映したネックレスすら再現している。他人がわざわざ再現するアイテムではない。 Ⅵ) デア・リヒターとの関係性 デア・リヒターはダーク召喚獣と深い関わりがあることは容易に想像できるだろう。しかし、ダーク召喚獣と同じく、その素性を調査するには情報が足りなさすぎる。作中で分かることは、空を飛んでいること、本体(上半身)、本体(下半身)、右腕、左腕の4つのパーツからなることと、腕が幻光体ではないことくらいである。デア・リヒターは一体何なのだろうか。そしてダーク召喚獣とどのような関連性があるのだろうか。 デア・リヒターはザナルカンド方面から飛来し、ザナルカンド製の機械特有の円盤を持つ。 ザナルカンドと深い関わりがあると考えられる。 ダーク召喚獣の正体についての考察ここまでの謎を踏まえ、ダーク召喚獣の正体を以下のように考察する。 Ⅰ) ダーク召喚獣を生み出したのはユウナレスカではなく、訓練場のオヤジ(以下トレマ)である。 ダーク召喚獣を生み出した人物がユウナレスカではなく、トレマであるとすると全ての辻褄が合う。ダーク召喚獣を生み出すためにザナルカンドを訪れた者がいた形跡がないのは、そもそもダーク召喚獣がザナルカンドで創造されていないからであろう。すると、あれだけ強力な召喚獣を作れる可能性のある人物はトレマのみだと考えられる。 なお、これらの祈り子が作中登場しないのは、訪れる事の出来ない場所に安置されているからであろう。歴代の究極召喚獣の祈り子が作中登場しないのと同じ理由だと考えられる。 真実運動でベベルの中枢へ出入りしていたことから、公になっておらず、比較的新しく創造されたアニマについても知っていることは想像に難くない。 Ⅱ) ダーク召喚獣は『シン』を討伐する訓練のため、仮想『シン』として創造された。 トレマがモンスター訓練場を運営しているのは、討伐隊の訓練のためである。ダーク召喚獣とエボン=ジュが憑依した召喚獣の容姿が同じことから、ダーク召喚獣は『シン』討伐訓練のため、仮想の『シン』として創造されたと考えられないだろうか。そうするとトレマ、モンスター訓練場、ダーク召喚獣が繋がるのである。 ユウナもエボン=ジュが憑依した召喚獣を「小さな『シン』」と評している。 Ⅲ) デア・リヒターは『シン』と同じく、内側と外側で別々の機能を持つモンスターである。 デア・リヒターの消滅モーションを見ると、腕は爆発し消滅(幻光虫無し)、本体は縮んで最後に少量の幻光虫を放つことが分かる。ということは、内側と外側で別のモンスターであるとは考えられないだろうか。 デア・リヒターの腕と本体(外側)は幻光虫を一切放たないが、リンカーネーションで復活したり、本体が縮んだり、機械とはまた違う性質を持つ。 斬魔刀で倒すと、下半身も上半身と同様の特性を持つことが分かる。 デア・リヒターが消滅する寸前にようやく少量の幻光虫が放たれる。 Ⅳ) デア・リヒター(外殻)は機械兵器を模した召喚獣である。 デア・リヒターの腕は消滅時、幻光虫を放出せずに爆発するが、一方で本体のリンカーネーションにより召喚されたように再登場する。本体も消滅ギリギリまで幻光虫は放出しないが、召喚獣の消滅と同じくメタリック体となる過程がある。この機械と召喚獣の両特性を持つ創造物が、実は作中にもう一つ登場している。夢のザナルカンドである。夢のザナルカンドが『シン』に襲撃された際、幻光虫を一切放出せず爆発しながら崩壊していく。しかし、作中で語られるとおり夢のザナルカンドは間違いなく召喚された幻光体である。このことから、祈り子が機械を夢見て、それを召喚した場合、デア・リヒターのような機械と召喚獣の両方の特徴を併せ持つ創造物になるのであろうと考えられる。 ザナルカンド崩壊時、機械は爆発し、石像は崩れる。 現実世界で起き得る現象が正しく再現されている。 もしかすると、召喚獣が倒された際の幻光虫の放出は、召喚獣の姿を保てなくなったからではなく、単に魔物が倒されたときの再現の可能性がある。 デア・リヒターの基となったのは、ザナルカンドとベベルの機械戦争の兵器であろう。 その時に出来た胸の傷を、召喚獣化したときに再現したのだと推察する。 なお、デア・リヒター(Der Richter)はドイツ語で裁判官の意味である。 FFシリーズで召喚獣、機械、裁判官といえば、「聖なる審判」で馴染みあるアレクサンダーがいる。 FFX用にアレンジしたオマージュなのかもしれない。 Ⅴ) デア・リヒター(コア)はエボン=ジュと同じ、召喚士の能力を持つ幻光体である。 デア・リヒター(コア)はトレマが創造したダーク召喚獣を召喚するために創造された召喚士型のモンスターであると考えられる。おそらく訓練場から逃走したモンスターのうちの1体であろう。ダーク召喚獣の全滅を察知しデア・リヒター(外殻)を召喚、憑依したと考えれば、デア・リヒター出現のタイミングと矛盾がない。 あとがきアルティマニアΩの書籍持ってるけど電子書籍化してほしいなぁ。 著作権に関する権利表記 Copyright (C) 2001, 2003, 2019 SQUARE ENIX CO., LTD. All Rights Reserved.","link":"/2021/06/08/2021-06-08-01/"},{"title":"Dynamix 最強キャラに関する考察","text":"注意事項 この記事はDynamix Lv.15をBleed modeでクリア出来ない初心者から中級者向け。 この記事はDynamix Ver.3.15. 2021/6/15時点での情報を基に作成した。 情報は引用元及び手持ちを参照。ランクは主観。 Dynamixの基礎知識CharacterについてCharacterはEvent modeでの報酬やStoreで交換できる。設定すると、選曲画面に表示される。各Character毎にAbilityが設定されており、EXPが増えたり、Bleedが有効になっている場合に有利なプレイが出来たりする(Wave Test除く)。 Bleed modeについていわゆる体力制のゲームが出来る。体力が0になった場合、楽曲が強制終了する。体力は基本値1,000で、ノーツによって増減する。 HEAL(Perfect) HEAL(Good) DAMAGE(MISS) 2 1 -50 Wave Testを除き、CharacterのAbilityによってHP、HEAL、DAMAGEの補正が掛かる。 Characterの強さに関する定義以下に2体のCharacterを示す。どちらが多く連続でMISSが出来るだろうか。 Artificial Flagger Emmy 楽曲 Future City Ⅵ Fl0at on Air EXP - - HP - +50% HEAL (Perfect) - +25% HEAL (Good) - +100% DAMAGE -35% - 正解は、 Artificial Flaggerが1回多くMISSできる。(要反転) Artificial Flagger Emmy 楽曲 Future City Ⅵ Fl0at on Air EXP - - HP - +50% HEAL (Perfect) - +25% HEAL (Good) - +100% DAMAGE -35% - HP / DAMAGE *1 30.8 30.0 HP / HEAL(Perfect) *2 500.0 600.0 HP / HEAL(Good) *3 1000.0 750.0 DAMAGE / HEAL(Perfect) *4 16.3 20.0 DAMAGE / HEAL(Good) *5 32.5 25.0 *1 HP / DAMAGE: HP MAXからHP 0になる連続MISS回数*2 HP / HEAL(Perfect): HP 0からHP MAXに必要なPerfect数*3 HP / HEAL(Good): HP 0からHP MAXに必要なGood数*4 DAMAGE / HEAL(Perfect): 1 Miss帳消しに必要なPerfect数*5 DAMAGE / HEAL(Good): 1 Miss帳消しに必要なGood数 DAMAGE -35%は、HP +50%よりもHP / DAMAGEの値が大きく、よりMISS出来ることが分かる。しかも1 MISSのDAMAGEを帳消しするPerfect、Goodの数を減らすことができ、間接的にHEAL +○%の効果も得ていることになる。 このことから、本ページではDAMAGE -○%をベースに、他のAbilityも考慮し、Characterの強さを決める。 Characterの強さランク S Little D Chaka Amaterasu 楽曲 - CHAKA 天照 EXP - - - HP - -75% -50% HEAL (Perfect) - -25% - HEAL (Good) - -25% +250% DAMAGE - -75% -50% HP / DAMAGE *1 20.0 20.0 20.0 HP / HEAL(Perfect) *2 500.0 166.7 250.0 HP / HEAL(Good) *3 1000.0 333.3 142.9 DAMAGE / HEAL(Perfect) *4 25.0 8.3 12.5 DAMAGE / HEAL(Good) *5 50.0 16.7 7.1 Chaka文句なしの最強Character。HPに大きなマイナス補正があるが、MISSの許容数は普通のCharacterと遜色ない。HEALにもマイナス補正があるが、DAMAGEのマイナス補正がそれ以上であるため、通常のCharacterより格段に高い回復量が見込める。分かりやすく例えると、[HP, HEAL(Perfect, Good), DAMAGE]=[+0%, +200%, 0%]と同じ実力である。 AmaterasuChakaと同等の強さを持つCharacter。DAMAGEの値はChakaより控えめだが、HEALにマイナス補正が無く、Goodはむしろプラス補正である。分かりやすく例えると、[HP, HEAL(Perfect), HEAL(Good), DAMAGE]=[+0%, +100%, +600%, +0%]と同じ実力である。HEAL(Good)を活かして局所難でお茶を濁すプレイも可能。Chakaとどちらを使うかは好み。 ランク A+ Little D Lazz Nautica 楽曲 - PIXEVLAZZ Aeronautica EXP - - - HP - -25% -40% HEAL (Perfect) - +45% - HEAL (Good) - +45% +100% DAMAGE - -25% -40% HP / DAMAGE *1 20.0 20.0 20.0 HP / HEAL(Perfect) *2 500.0 258.6 300.0 HP / HEAL(Good) *3 1000.0 517.2 300.0 DAMAGE / HEAL(Perfect) *4 25.0 12.9 15.0 DAMAGE / HEAL(Good) *5 50.0 25.9 15.0 LazzChakaの下位互換。DAMAGEのマイナス補正は控えめだが、HEALのプラス補正がそれを補う。分かりやすく例えると、[HP, HEAL(Perfect, Good) DAMAGE]=[+0%, +93%, +0%]と同じ実力である。 NauticaAmaterasuの下位互換。DAMAGE、HEAL(Good)の補正共に控えめだが、普通のCharacterとは一線を画す。分かりやすく例えると、[HP, HEAL(Perfect), HEAL(Good), DAMAGE]=[+0%, +67%, +233%, +0%]と同じ実力である。 ランク A Little D Mei &amp; Lynn Kibi 楽曲 - Love like we’re dying 荼蘼 EXP - - - HP - -70% -75% HEAL (Perfect) - - - HEAL (Good) - -500% -750% DAMAGE - -70% -75% HP / DAMAGE *1 20.0 20.0 20.0 HP / HEAL(Perfect) *2 500.0 150.0 125.0 HP / HEAL(Good) *3 1000.0 -75.0 -38.5 DAMAGE / HEAL(Perfect) *4 25.0 7.5 6.3 DAMAGE / HEAL(Good) *5 50.0 -3.8 -1.9 KibiDAMAGE補正が優秀だが、Goodでダメージを受けてしまうため、安定性に欠ける。通常MISS 1個を帳消しするためにはPerfectが25個必要だが、Kibiは7個で良い。一方、Good 2個でMISS 1個分のダメージがある。分かりやすく例えると、[HP, HEAL(Perfect), HEAL(Good), DAMAGE]=[+0%, +300%, -2,700%, +0%]と同じ実力である。 Mei &amp; LynnKibiと比べるとメリットはほぼそのままに、デメリットがかなり控え目。MISS 1個の帳消しにPerfectが8個必要。一方、Good 4個でMISS 1個分のダメージとなる。分かりやすく例えると、[HP, HEAL(Perfect), HEAL(Good), DAMAGE]=[+0%, +233%, -1,433%, +0%]と同じ実力である。 ランク B+ Little D Artificial Flagger 楽曲 - Future City Ⅵ EXP - - HP - - HEAL (Perfect) - - HEAL (Good) - - DAMAGE - -35% HP / DAMAGE *1 20.0 30.8 HP / HEAL(Perfect) *2 500.0 500.0 HP / HEAL(Good) *3 1000.0 1000.0 DAMAGE / HEAL(Perfect) *4 25.0 16.3 DAMAGE / HEAL(Good) *5 50.0 32.5 Artificial FlaggerMISS 1個の帳消しに必要なPerfect/Good数が通常のCharacterに比べ2/3ほどで済むうえ、MISSの回数が通常より多くても耐えることが出来る。分かりやすく例えると、[HP, HEAL(Perfect, Good), DAMAGE]=[+54%, +54%, +0%]と同じ実力である。 ランク B Little D Marie 楽曲 - Nives Marinae EXP - - HP - -15% HEAL (Perfect) - +30% HEAL (Good) - +30% DAMAGE - -15% HP / DAMAGE *1 20.0 20.0 HP / HEAL(Perfect) *2 500.0 326.9 HP / HEAL(Good) *3 1000.0 653.8 DAMAGE / HEAL(Perfect) *4 25.0 16.3 DAMAGE / HEAL(Good) *5 50.0 32.7 MarieArtificial Flaggerの下位互換。MISSの帳消し力はArtificial Flaggerと同レベルだが、MISS許容数は並み。分かりやすく例えると、[HP, HEAL(Perfect, Good), DAMAGE]=[+0%, +53%, +0%]と同じ実力である。 Characterの強さ(EXP +30% Ability込み)ランク B Little D Μηχανισμός των Αντικυθήρων Asuka 楽曲 - Mechanismós ton Antikythíron The Path EXP - +30% +30% HP - - - HEAL (Perfect) - +20% +20% HEAL (Good) - +20% +20% DAMAGE - -10% -10% HP / DAMAGE *1 20.0 22.2 22.2 HP / HEAL(Perfect) *2 500.0 416.7 416.7 HP / HEAL(Good) *3 1000.0 833.3 833.3 DAMAGE / HEAL(Perfect) *4 25.0 18.8 18.8 DAMAGE / HEAL(Good) *5 50.0 37.5 37.5 Summer Granata Jack 夏色メランコリー Grenade Jack Out KIllER EXP +30% +30% +30% HP - - - HEAL (Perfect) - - - HEAL (Good) - - - DAMAGE -20% -20% -20% HP / DAMAGE *1 25.0 25.0 25.0 HP / HEAL(Perfect) *2 500.0 500.0 500.0 HP / HEAL(Good) *3 1000.0 1000.0 1000.0 DAMAGE / HEAL(Perfect) *4 20.0 20.0 20.0 DAMAGE / HEAL(Good) *5 40.0 40.0 40.0 Μηχανισμός των Αντικυθήρων、Asuka通常より気持ち耐久があり、かつ1 MISSの帳消しに必要なPerfect/Goodの数が3/4程で済む。Summer、Granata、Jackと比べると、気持ち回復特化寄り。持っていればどれを使ってもほぼ同じ。分かりやすく例えると、[HP, HEAL(Perfect, Good), DAMAGE]=[+11%, +33%, +0%]と同じ実力である。 Summer、Granata、JackΜηχανισμός των Αντικυθήρων、Asukaと比べると気持ち耐久寄り。持っていればどれを使ってもほぼ同じ。分かりやすく例えると、[HP, HEAL(Perfect, Good), DAMAGE]=[+25%, +25%, +0%]と同じ実力である。 *1 HP / DAMAGE: HP MAXからHP 0になる連続MISS回数*2 HP / HEAL(Perfect): HP 0からHP MAXに必要なPerfect数*3 HP / HEAL(Good): HP 0からHP MAXに必要なGood数*4 DAMAGE / HEAL(Perfect): 1 Miss帳消しに必要なPerfect数*5 DAMAGE / HEAL(Good): 1 Miss帳消しに必要なGood数 参考 Dynamix Wiki Characters","link":"/2021/06/15/2021-06-15-01/"},{"title":"Hexo Icarusのテーマの変更箇所の備忘録","text":"ネットに転がっているIcarusの情報はバージョンが古いために参考にならず、調査。備忘録としておいておく。お困りの方の参考になれば幸い。 About、404ページの配置About、404はMarkdownファイルを [PROJECT DIR]\\source 以下に配置することで使用可能。 readme.mdの配置Github用に readme.md を置く場合、404と同じように [PROJECT DIR]\\source に配置する。合わせて [PROJECT DIR]\\_config.yml に追記が必要。 ◆変更前 [PROJECT DIR]\\_config.yml(変更後)12# Directoryskip_render: ◆変更後 [PROJECT DIR]\\_config.yml(変更後)12# Directoryskip_render: readme.md こうすることで hexo generate コマンドで readme.md が public フォルダ直下に配置される。 不要なウィジェットの非表示[PROJECT DIR]\\_config.icarus.yml を修正する。ドキュメントに従い、コメントアウトではなく position を null で対応。 ◆変更前 [PROJECT DIR]\\_config.yml(変更前)123456widgets: # Google FeedBurner email subscription widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: subscribe_email ◆変更後 [PROJECT DIR]\\_config.yml(変更後)123456widgets: # Google FeedBurner email subscription widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: null type: subscribe_email フォントの変更デフォルトだと中国語のような文字が表示される。[PROJECT DIR]\\themes\\icarus\\include\\style\\base.styl から Microsoft YaHei を削除。あとはお好み。今回はMac用のヒラギノ、Android用のNoto Sans CJK JPを優先し、それらがない場合はNoto Sans JPのWebフォントを表示するようにした。 ◆変更前 [PROJECT DIR]\\themes\\icarus\\include\\style\\base.styl(変更前)12$family-sans-serif ?= Ubuntu, Roboto, 'Open Sans', 'Microsoft YaHei', sans-serif$family-code ?= 'Source Code Pro', monospace, 'Microsoft YaHei' ◆変更後 [PROJECT DIR]\\themes\\icarus\\include\\style\\base.styl(変更後)123@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP&amp;display=swap');$family-sans-serif ?= Hiragino Sans, Noto Sans CJK JP, Noto Sans JP$family-code ?= 'Source Code Pro', monospace プロファイル ウィジェットの配置[PROJECT DIR]\\themes\\icarus\\source\\img 直下に配置。 アーカイブ ウィジェットの日付表記の変更デフォルトだと “M月 YYYY”という表記で使いづらい。[PROJECT DIR]\\node_modules\\hexo-component-inferno\\lib\\view\\widget\\archives.js を修正する。 ◆変更前 [PROJECT DIR]\\node_modules\\hexo-component-inferno\\lib\\view\\widget\\archives.js(変更前)12345posts.forEach(function (post) { var year = date.year(); var month = date.month() + 1; var name = date.format(format || type === 'monthly' ? 'MMMM YYYY' : 'YYYY'); var lastData = data[length - 1]; ◆変更後 [PROJECT DIR]\\node_modules\\hexo-component-inferno\\lib\\view\\widget\\archives.js(変更後)12345posts.forEach(function (post) { var year = date.year(); var month = date.month() + 1; var name = date.format(format || type === 'monthly' ? 'YYYY / MM' : 'YYYY'); var lastData = data[length - 1]; 記事の日付表記[PROJECT DIR]\\themes\\icarus\\layout\\common\\article.jsx を修正。正直直し方が思いつかず力技で対応。精進したい。(2021/06/17追記) 綺麗に直せました。 ◆変更前 [PROJECT DIR]\\themes\\icarus\\layout\\common\\archives.js(変更前)1234567891011121314module.exports = class extends Component { render() { &lt;div class=&quot;card&quot;&gt; &lt;article class={`card-content article${'direction' in page ? ' ' + page.direction : ''}`} role=&quot;article&quot;&gt; {page.layout !== 'page' ? &lt;div class=&quot;article-meta is-size-7 is-uppercase level is-mobile&quot;&gt; &lt;div class=&quot;level-left&quot;&gt; {/* Creation Date */} {page.date &amp;&amp; &lt;span class=&quot;level-item&quot; dangerouslySetInnerHTML={{ __html: _p('article.created_at', `&lt;time dateTime=&quot;${date_xml(page.date)}&quot; title=&quot;${new Date(page.date).toLocaleString()}&quot;&gt;${date(page.date)}&lt;/time&gt;`) }}&gt;&lt;/span&gt;} {/* Last Update Date */} {page.updated &amp;&amp; &lt;span class=&quot;level-item&quot; dangerouslySetInnerHTML={{ __html: _p('article.updated_at', `&lt;time dateTime=&quot;${date_xml(page.updated)}&quot; title=&quot;${new Date(page.updated).toLocaleString()}&quot;&gt;${date(page.updated)}&lt;/time&gt;`) }}&gt;&lt;/span&gt;} ◆変更後 [PROJECT DIR]\\themes\\icarus\\layout\\common\\archives.js(変更後)1234567891011121314module.exports = class extends Component { render() { &lt;div class=&quot;card&quot;&gt; &lt;article class={`card-content article${'direction' in page ? ' ' + page.direction : ''}`} role=&quot;article&quot;&gt; {page.layout !== 'page' ? &lt;div class=&quot;article-meta is-size-7 is-uppercase level is-mobile&quot;&gt; &lt;div class=&quot;level-left&quot;&gt; {/* Creation Date */} {page.date &amp;&amp; &lt;span class=&quot;level-item&quot; dangerouslySetInnerHTML={{ __html: _p('article.created_at', `${date(page.date)}`) }}&gt;&lt;/span&gt;} {/* Last Update Date */} {page.updated &amp;&amp; &lt;span class=&quot;level-item&quot; dangerouslySetInnerHTML={{ __html: _p('article.updated_at', `${date(page.updated)}`) }}&gt;&lt;/span&gt;} Highlight.jsの最新版利用Highlight.jsを折角なので最新版を使うようにする。多分Prismjsもここを弄れば使えるはずだがよく分からなかった。 ◆変更前 [PROJECT DIR]\\themes\\icarus\\layout\\common\\head.jsx(変更前)1234module.exports = class extends Component { render() { return &lt;head&gt; {hlTheme ? &lt;link rel=&quot;stylesheet&quot; href={cdn('highlight.js', '9.12.0', 'styles/' + hlTheme + '.css')} /&gt; : null} ◆変更後 [PROJECT DIR]\\themes\\icarus\\layout\\common\\head.jsx(変更前)1234module.exports = class extends Component { render() { return &lt;head&gt; {hlTheme ? &lt;link rel=&quot;stylesheet&quot; href={cdn('highlight.js', '11.0.1', 'styles/' + hlTheme + '.css')} /&gt; : null}","link":"/2021/06/16/2021-06-16-01/"}],"tags":[{"name":"麻婆豆腐","slug":"麻婆豆腐","link":"/tags/%E9%BA%BB%E5%A9%86%E8%B1%86%E8%85%90/"},{"name":"RPG","slug":"RPG","link":"/tags/RPG/"},{"name":"FINAL FANTASY","slug":"FINAL-FANTASY","link":"/tags/FINAL-FANTASY/"},{"name":"FINAL FANTASY X","slug":"FINAL-FANTASY-X","link":"/tags/FINAL-FANTASY-X/"},{"name":"リズムゲーム","slug":"リズムゲーム","link":"/tags/%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%B2%E3%83%BC%E3%83%A0/"},{"name":"Dynamix","slug":"Dynamix","link":"/tags/Dynamix/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Hexo Icarus","slug":"Hexo-Icarus","link":"/tags/Hexo-Icarus/"},{"name":"Github Pages","slug":"Github-Pages","link":"/tags/Github-Pages/"}],"categories":[{"name":"料理","slug":"料理","link":"/categories/%E6%96%99%E7%90%86/"},{"name":"ゲーム","slug":"ゲーム","link":"/categories/%E3%82%B2%E3%83%BC%E3%83%A0/"},{"name":"PC","slug":"PC","link":"/categories/PC/"}]}